[
  {
    "id": "101",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection vulnerability detected due to the usage of executeQuery or executeUpdate methods without the use of PreparedStatement.",
    "compliance": [],
    "performanceImpactDetails": [
      "Use prepared statements instead of concatenation : Negligible impact on performance."
    ]
  },
  {
    "id": "102",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection in batched query using 'addBatch'",
    "compliance": [],
    "performanceImpactDetails": [
      "Ensure safe parameterized batched queries : Minimal impact on resource usage.",
      "Avoid dynamic SQL in batched queries : Improved maintainability, negligible impact."
    ]
  },
  {
    "id": "103",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection due to dynamic query construction",
    "compliance": [],
    "performanceImpactDetails": [
      "Switching to parameterized queries may add slight overhead due to query preparation but ensures security.",
      "Using ORMs can increase resource utilization slightly but significantly reduces vulnerability risks."
    ]
  },
  {
    "id": "104",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection detected in stored procedure call",
    "compliance": [],
    "performanceImpactDetails": [
      "Using parameterized stored procedures may slightly increase execution time but significantly enhances security.",
      "Input validation introduces negligible overhead but ensures data integrity and reduces attack vectors."
    ]
  },
  {
    "id": "105",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection detected in native @Query annotation",
    "compliance": [],
    "performanceImpactDetails": [
      "Switching to named parameters or parameterized queries may introduce slight parsing overhead but ensures enhanced security.",
      "Input validation adds negligible performance overhead but significantly reduces the risk of SQL Injection."
    ]
  },
  {
    "id": "106",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection detected in Criteria API query",
    "compliance": [],
    "performanceImpactDetails": [
      "Using parameter binding in the Criteria API has negligible performance impact but ensures safer query construction.",
      "Input validation may slightly increase resource utilization during runtime but significantly enhances security."
    ]
  },
  {
    "id": "107",
    "type": "SQL_INJECTION",
    "description": "Potential SQL Injection detected in named query",
    "compliance": [],
    "performanceImpactDetails": [
      "Using parameterized named queries introduces negligible performance overhead while significantly reducing SQL Injection risks.",
      "Performing regular security tests on named queries ensures secure query execution with minimal runtime cost."
    ]
  },
  {
    "id": "205",
    "type": "BROKEN_ACCESS_CONTROL",
    "description": "Missing security annotations (e.g., @PreAuthorize, @Secured) in controller method. Without these annotations, sensitive endpoints may be accessible to unauthorized users, leading to potential data breaches or unauthorized actions. This issue commonly occurs when access control is implemented at the service layer but overlooked at the controller level, leaving endpoints exposed.",
    "compliance": [],
    "performanceImpactDetails": [
      "Adding security annotations like @PreAuthorize or @Secured has minimal runtime impact due to Spring Security's optimized filter chain and caching mechanisms.",
      "Granular access control policies introduce slight overhead for complex role or permission checks but are efficient in well-designed RBAC systems."
    ]
  },
  {
    "id": "206",
    "type": "BROKEN_ACCESS_CONTROL",
    "description": "Missing access control logic in sensitive service method.",
    "compliance": [],
    "performanceImpactDetails": [
      "Minimal impact as access control checks are lightweight and essential for security.",
      "Ensure access control logic is efficient to avoid unnecessary overhead."
    ]
  },
  {
    "id": "307",
    "type": "BROKEN_AUTHENTICATION",
    "description": "Hardcoded credentials detected in the code (e.g., username, password, or API keys).",
    "compliance": [],
    "performanceImpactDetails": [
      "Minimal performance impact if environment variables are used.",
      "Could add additional startup time for loading secure configuration."
    ]
  },
  {
    "id": "308",
    "type": "BROKEN_AUTHENTICATION",
    "description": "Weak or missing password policies detected in the authentication logic.",
    "compliance": [],
    "performanceImpactDetails": [
      "Minimal impact on performance as password validation is typically lightweight."
    ]
  },
  {
    "id": "309",
    "type": "BROKEN_AUTHENTICATION",
    "description": "Detected potential plaintext password storage in the database or logs.",
    "compliance": [],
    "performanceImpactDetails": [
      "Moderate performance impact due to password hashing computation during login.",
      "Impact can be mitigated using efficient hash algorithms and reasonable iterations."
    ]
  },
  {
    "id": "310",
    "type": "BROKEN_AUTHENTICATION",
    "description": "Session fixation vulnerability detected where session IDs are not regenerated upon authentication.",
    "compliance": [],
    "performanceImpactDetails": [
      "Negligible performance impact as session regeneration is a lightweight operation."
    ]
  },
  {
    "id": "311",
    "type": "BROKEN_AUTHENTICATION",
    "description": "Weak JWT signing algorithm detected (e.g., HS256 with a weak key).",
    "compliance": [],
    "performanceImpactDetails": [
      "Negligible impact if strong algorithms like RS256 are used efficiently.",
      "Performance impact may increase slightly with longer key lengths."
    ]
  },
  {
    "id": "412",
    "type": "INSECURE_DESERIALIZATION",
    "description": "Usage of potentially dangerous deserialization methods like 'readObject' or 'readUnshared'.",
    "compliance": [
      "PCI-DSS",
      "HIPAA"
    ],
    "performanceImpactDetails": [
      "Implementing input validation and secure deserialization can slightly increase processing overhead.",
      "Replacing insecure deserialization libraries with secure ones may require migration efforts but improves overall security."
    ]
  },
  {
    "id": "413",
    "type": "INSECURE_DESERIALIZATION",
    "description": "Deserialization of data originating from untrusted sources such as 'request.getParameter', 'getInputStream', or 'getHeader'.",
    "compliance": [],
    "performanceImpactDetails": [
      "Input validation may add minor computational overhead.",
      "Replacing deserialization logic with secure alternatives may require additional development effort."
    ]
  },
  {
    "id": "414",
    "type": "INSECURE_DESERIALIZATION",
    "description": "Deserialized object missing validation. Detected use of 'java.io.Object' or similar types without validation.",
    "compliance": [],
    "performanceImpactDetails": [
      "Adding validation may increase processing time but enhances security.",
      "Whitelisting may require upfront configuration but prevents exploitation of insecure object types."
    ]
  },
  {
    "id": "415",
    "type": "INSECURE_DESERIALIZATION",
    "description": "Detected usage of a vulnerable library in the code.",
    "compliance": [],
    "performanceImpactDetails": [
      "Replacing a library with a secure alternative may have minor integration costs but ensures improved security and compliance.",
      "Maintaining updated dependencies reduces the risk of performance degradation caused by unpatched vulnerabilities."
    ]
  },
  {
    "id": "516",
    "type": "INSUFFICIENT_LOGGING_AND_MONITORING",
    "description": "Sensitive operations are not logged.",
    "compliance": [],
    "performanceImpactDetails": [
      "Logging sensitive operations may introduce additional overhead in high-throughput systems. Consider using asynchronous logging."
    ]
  },
  {
    "id": "517",
    "type": "INSUFFICIENT_LOGGING_AND_MONITORING",
    "description": "Missing logging for exceptions and error handling.",
    "compliance": [],
    "performanceImpactDetails": [
      "Error logging might increase storage requirements but is essential for debugging and auditing."
    ]
  },
  {
    "id": "518",
    "type": "INSUFFICIENT_LOGGING_AND_MONITORING",
    "description": "Improper logging of sensitive data.",
    "compliance": [],
    "performanceImpactDetails": [
      "Redacting sensitive information can add computational overhead but ensures compliance with privacy regulations."
    ]
  },
  {
    "id": "519",
    "type": "INSUFFICIENT_LOGGING_AND_MONITORING",
    "description": "Missing audit logs for administrative actions.",
    "compliance": [],
    "performanceImpactDetails": [
      "Audit logging may impact database write performance; consider using a separate log store."
    ]
  },
  {
    "id": "601",
    "type": "SECURITY_MISCONFIGURATION",
    "description": "Missing critical HTTP security headers in the application. Without these headers, the application is vulnerable to attacks such as clickjacking, MIME sniffing, and cross-site scripting (XSS). Commonly omitted headers include X-Frame-Options, X-Content-Type-Options, Strict-Transport-Security (HSTS), and Content-Security-Policy (CSP).",
    "compliance": [],
    "performanceImpactDetails": [
      "Adding security headers has negligible performance impact as they are applied at the HTTP response level.",
      "Strict-Transport-Security (HSTS) requires secure HTTPS configuration, which may introduce overhead during initial setup but improves long-term security."
    ]
  },
  {
    "id": "602",
    "type": "SECURITY_MISCONFIGURATION",
    "description": "HTTPS is not enforced in the application. Allowing HTTP traffic can expose sensitive data to interception and man-in-the-middle (MITM) attacks. This misconfiguration occurs when HttpSecurity.requiresChannel().requiresSecure() is not configured, leaving communication insecure.",
    "compliance": [],
    "performanceImpactDetails": [
      "Enforcing HTTPS introduces negligible performance impact with modern TLS implementations.",
      "Initial HTTPS handshake may add slight latency, but this is minimized with session reuse and HTTP/2 optimizations."
    ]
  },
  {
    "id": "603",
    "type": "SECURITY_MISCONFIGURATION",
    "description": "Default or hardcoded credentials are present in properties files. These credentials can expose the application to unauthorized access, data breaches, or exploitation by attackers. This misconfiguration often occurs when sensitive values like database passwords, API keys, or secrets are hardcoded instead of being externalized or secured.",
    "compliance": [],
    "performanceImpactDetails": [
      "Replacing hardcoded credentials with dynamically loaded secrets introduces negligible performance impact.",
      "Using secure secrets management tools may add minimal overhead during the initialization phase but significantly enhances security."
    ]
  },
  {
    "id": "701",
    "type": "SENSITIVE_DATA_EXPOSURE",
    "description": "Sensitive data is logged in application logs. Logging sensitive information such as passwords, API keys, tokens, or PII can lead to serious data breaches. Logs are often accessible to multiple teams or systems and may be stored in shared or unprotected environments, making this vulnerability highly critical.",
    "compliance": [],
    "performanceImpactDetails": [
      "Masking or redacting sensitive data in logs introduces negligible performance impact.",
      "Properly configured centralized logging and access controls may introduce a minor administrative overhead but significantly enhance security."
    ]
  },
  {
    "id": "702",
    "type": "SENSITIVE_DATA_EXPOSURE",
    "description": "Hardcoded sensitive information is present in the codebase. This includes credentials such as passwords, API keys, tokens, or secrets that are directly embedded in the source code. Hardcoding sensitive data exposes the application to security risks, including unauthorized access and data breaches, especially if the code is stored in version control systems.",
    "compliance": [],
    "performanceImpactDetails": [
      "Using environment variables or secrets management tools introduces negligible runtime overhead.",
      "Secure secrets management may require additional setup time but significantly enhances overall application security."
    ]
  },

  {
    "id": "1001",
    "type": "ENCRYPTION_AT_REST",
    "description": "Unencrypted PHI data detected. Ensure data is encrypted before saving.",
    "compliance": [
      "HIPAA"
    ],
    "performanceImpactDetails": [
      "Using AES-256 or equivalent encryption introduces negligible runtime overhead.",
      "Encrypting sensitive data at rest enhances security but may introduce minimal processing latency."
    ]
  }

]