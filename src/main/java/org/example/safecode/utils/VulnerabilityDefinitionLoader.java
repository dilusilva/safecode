package org.example.safecode.utils;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.example.safecode.enums.VulnerabilityType;
import org.example.safecode.models.VulnerabilityDefinition;

import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;


@Slf4j
public class VulnerabilityDefinitionLoader {
    private static final Map<String, VulnerabilityDefinition> definitions = new HashMap<>();

    static {
        loadDefinitions();
    }

    private static void loadDefinitions() {
        try (InputStream inputStream = VulnerabilityDefinitionLoader.class.getClassLoader().getResourceAsStream("config/vulnerabilities.json")) {
            if (inputStream != null) {
                ObjectMapper mapper = new ObjectMapper();
                List<VulnerabilityDefinition> loadedDefinitions = mapper.readValue(
                        inputStream, new TypeReference<>() {}
                );
                for (VulnerabilityDefinition def : loadedDefinitions) {
                    definitions.put(def.getId(), def);
                }
                log.info("Loaded {} vulnerability definitions", definitions.size());
            } else {
                log.error("Vulnerability definitions file not found");
            }
        } catch (Exception e) {
            log.error("Error loading vulnerability definitions: {}", e.getMessage());
        }
    }

    public static VulnerabilityDefinition getDefinitionById(String id) {
        return definitions.get(id);
    }

    public List<VulnerabilityDefinition> getDefinitionsByType(VulnerabilityType type) {
        return definitions.values().stream()
                .filter(def -> def.getType() == type)
                .collect(Collectors.toList());
    }

    public List<VulnerabilityDefinition> getAllDefinitions() {
        return new ArrayList<>(definitions.values());
    }
}
