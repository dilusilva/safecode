package org.example.safecode.detection;

import com.intellij.openapi.project.Project;
import com.intellij.psi.PsiFile;
import lombok.extern.slf4j.Slf4j;
import org.example.safecode.compliance.IndustryComplianceChecker;
import org.example.safecode.detection.rules.*;
import org.example.safecode.detection.rules.broken_access_control.BrokenAccessControlRule;
import org.example.safecode.detection.rules.insecure_deserialization.InsecureDeserializationRule;
import org.example.safecode.detection.rules.insuffient_loggin.InsufficientLoggingMonitoringRule;
import org.example.safecode.detection.rules.security_miconfiguration.SecurityMisconfigurationRule;
import org.example.safecode.detection.rules.sensitive_data_exposure.SensitiveDataExposureRule;
import org.example.safecode.detection.rules.sql_injection.InjectionRule;
import org.example.safecode.enums.VulnerabilityType;
import org.example.safecode.models.ProjectConfig;
import org.example.safecode.models.ScanResult;
import org.example.safecode.utils.ProjectConfigReader;

import java.util.*;

@Slf4j
public class VulnerabilityDetectionEngine {
    private Project project;
    private final Set<String> permitAllUrls;
//    private final List<VulnerabilityDefinition> vulnerabilityDefinitions;

    private final IndustryComplianceChecker complianceChecker;

    public VulnerabilityDetectionEngine(Project project,Set<String> permitAllUrls) {
        this.complianceChecker = new IndustryComplianceChecker();
        this.project = project;
        this.permitAllUrls = permitAllUrls;
//        this.vulnerabilityDefinitions = VulnerabilityDefinitionLoader.loadVulnerabilities();
        log.info("Initialized VulnerabilityDetectionEngine for project: {}", project.getName());
    }

    public List<ScanResult> performScan(PsiFile psiFile) {
        log.info("Starting scan for file: {}", psiFile.getName());

        Map<String, ScanResult> resultsMap = new HashMap<>();

        // Step 1: Run vulnerability scanners
        for (BaseRule scanner : GetEnabledScanners.get()) {
            log.debug("Running scanner: {}", scanner.getClass().getSimpleName());

            if (scanner instanceof BrokenAccessControlRule) {
                ((BrokenAccessControlRule) scanner).setPermitAllUrls(permitAllUrls);
            }


            for (ScanResult result : scanner.scan(psiFile)) {
                String key = generateKey(result);
                resultsMap.putIfAbsent(key, result);
                log.debug("Detected vulnerability: {} at line {}", result.getType(), result.getLineNumber());
            }
        }

        // Step 2: Run compliance checks (if applicable)
        ProjectConfig config = ProjectConfigReader.loadConfigOrDefault(project);
        if (!config.getComplianceRequirements().isEmpty()) {
            log.info("Running compliance checks for file: {}", psiFile.getName());
            for (ScanResult complianceResult : complianceChecker.checkCompliance(psiFile, config)) {
                String key = generateKey(complianceResult);
                resultsMap.put(key, complianceResult); // Replace or add compliance results
                log.debug("Detected compliance issue: {} at line {}", complianceResult.getType(), complianceResult.getLineNumber());
            }
        }

        log.info("Completed scan for file: {}", psiFile.getName());
        return new ArrayList<>(resultsMap.values());
    }

    private String generateKey(ScanResult result) {
        return result.getLineNumber() + "_" + result.getType().name()+ "_" +result.getVulnerabilityDefinition().getId();
    }
}